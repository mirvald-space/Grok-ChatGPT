import stripe
from aiogram import Bot
from aiohttp import web
from motor.motor_asyncio import AsyncIOMotorClient

from config import BOT_TOKEN, MONGO_URL, STRIPE_WEBHOOK_SECRET


async def handle_stripe_webhook(request):
    try:
        payload = await request.text()
        sig_header = request.headers.get("Stripe-Signature")

        event = stripe.Webhook.construct_event(
            payload, sig_header, STRIPE_WEBHOOK_SECRET
        )

        client = AsyncIOMotorClient(MONGO_URL)
        db = client.ai_bot
        bot = Bot(token=BOT_TOKEN)

        if event["type"] == "checkout.session.completed":
            session = event["data"]["object"]

            user = await db.users.find_one({"payments.payment_id": session.id})
            if user:
                payment = next(
                    (p for p in user["payments"] if p["payment_id"] == session.id), None
                )

                if payment and payment["status"] == "pending":
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã
                    await db.users.update_one(
                        {"_id": user["_id"]},
                        {
                            "$inc": {"balance": payment["tokens"]},
                            "$set": {"payments.$[elem].status": "completed"},
                        },
                        array_filters=[{"elem.payment_id": session.id}],
                    )

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    await bot.send_message(
                        user["user_id"],
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞!\n"
                        f"üí∞ –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {payment['tokens']} —Ç–æ–∫–µ–Ω–æ–≤\n"
                        f"üíé –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance'] + payment['tokens']} —Ç–æ–∫–µ–Ω–æ–≤",
                    )

        return web.Response(status=200)
    # –í –±–ª–æ–∫–µ except
    except Exception as e:
        error_message = str(e)
        print(f"–û—à–∏–±–∫–∞ webhook: {error_message}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if "user" in locals() and user:
            try:
                await bot.send_message(
                    user["user_id"],
                    f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞:\n"
                    f"‚îî {error_message}\n\n"
                    "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
                )
            except Exception as notify_error:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notify_error}")

        return web.Response(status=400, text=str(e))
