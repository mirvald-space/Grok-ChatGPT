from datetime import datetime

from aiogram import Dispatcher, F, Router, types
from aiogram.enums import ChatAction
from aiogram.filters import Command, StateFilter

from bot.keyboards.keyboards import (
    get_models_keyboard,
    get_payment_keyboard,
    get_start_keyboard,
)
from bot.services.claude import ClaudeService
from bot.services.gpt import GPTService
from bot.services.together import TogetherService
from config import CLAUDE_MODEL, GPT_MODEL, TOGETHER_MODEL
from database import Database

gpt_service = GPTService()
claude_service = ClaudeService()
together_service = TogetherService()

router = Router()


@router.message(Command("start"))
async def start_command(message: types.Message, db: Database):
    await db.add_user(user_id=message.from_user.id, username=message.from_user.username)

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.users.find_one({"user_id": message.from_user.id})

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user['username']}!\n–Ø –±–æ—Ç —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º AI –º–æ–¥–µ–ª—è–º.\n\n"
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']} —Ç–æ–∫–µ–Ω–æ–≤\n"
        f"ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {user['current_model']}\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–µ—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard(),
    )


@router.callback_query(F.data == "help")
async def help_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ AI –º–æ–¥–µ–ª—å\n"
        "2. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å\n"
        "3. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å AI\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "select_model")
async def select_model_callback(callback: types.CallbackQuery, db: Database):
    user = await db.users.find_one({"user_id": callback.from_user.id})
    if user:
        await callback.message.edit_text(
            f"ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {user['current_model']}\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:",
            reply_markup=get_models_keyboard(),
        )
    await callback.answer()


@router.callback_query(F.data.startswith("model_"))
async def change_model_handler(callback: types.CallbackQuery, db: Database):
    model = callback.data.split("_")[1]

    await db.users.update_one(
        {"user_id": callback.from_user.id}, {"$set": {"current_model": model}}
    )

    models = {GPT_MODEL: "GPT-4", CLAUDE_MODEL: "Claude 3", TOGETHER_MODEL: "Together"}

    await callback.message.edit_text(
        f"‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {models[model]}\n\n"
        "–ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
        "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
        reply_markup=get_start_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "add_balance")
async def add_balance_callback(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=get_payment_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "toggle_image_mode")
async def toggle_image_mode(callback: types.CallbackQuery, db: Database):
    await db.users.update_one(
        {"user_id": callback.from_user.id}, {"$set": {"image_mode": True}}
    )
    await callback.message.edit_text(
        "üé® –†–µ–∂–∏–º –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤–∫–ª—é—á–µ–Ω\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
        reply_markup=get_start_keyboard(),
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_start")
async def back_to_start_callback(callback: types.CallbackQuery, db: Database):
    user = await db.users.find_one({"user_id": callback.from_user.id})
    await callback.message.edit_text(
        f"üëã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {user['balance']} —Ç–æ–∫–µ–Ω–æ–≤\n"
        f"ü§ñ –¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {user['current_model']}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_start_keyboard(),
    )
    await callback.answer()


@router.message(StateFilter(None))
async def handle_message(message: types.Message, db: Database):
    user = await db.users.find_one({"user_id": message.from_user.id})

    if not user:
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    if user["balance"] <= 0:
        await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å!")
        return

    await message.bot.send_chat_action(
        chat_id=message.chat.id, action=ChatAction.TYPING
    )

    try:
        if user.get("image_mode"):
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ —Ç–æ–∫–µ–Ω–æ–≤
            if user["balance"] < 5:
                await message.answer(
                    "‚ùå –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 5 —Ç–æ–∫–µ–Ω–æ–≤!"
                )
                return

            image_url = await gpt_service.generate_image(message.text)
            await message.answer_photo(image_url)
            tokens_cost = 5
        else:
            if user["current_model"] == GPT_MODEL:
                response = await gpt_service.get_response(message.text)
            elif user["current_model"] == CLAUDE_MODEL:
                response = await claude_service.get_response(message.text)
            elif user["current_model"] == TOGETHER_MODEL:
                response = await together_service.get_response(message.text)
            else:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
                return
            await message.answer(response)
            tokens_cost = 1

        await db.users.update_one(
            {"user_id": message.from_user.id},
            {
                "$inc": {"balance": -tokens_cost},
                "$push": {
                    "messages_history": {
                        "model": (
                            "dalle-3"
                            if user.get("image_mode")
                            else user["current_model"]
                        ),
                        "message": message.text,
                        "response": image_url if user.get("image_mode") else response,
                        "timestamp": datetime.utcnow(),
                    }
                },
            },
        )

    except Exception as e:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        print(f"Error for user {message.from_user.id}: {str(e)}")
