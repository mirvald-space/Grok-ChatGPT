from datetime import datetime, timedelta

from aiogram import F, Router, types
from aiogram.enums import ChatAction
from aiogram.filters import Command

from bot.keyboards.keyboards import get_models_keyboard
from bot.locales.utils import get_text
from bot.services.claude import ClaudeService
from bot.services.gpt import GPTService
from bot.services.together import TogetherService
from config import (
    CLAUDE_MODEL,
    DAILY_TOKENS,
    FREE_TOKENS,
    GPT_MODEL,
    PAID_TARIFF_PRICE,
    TOGETHER_MODEL,
)
from database import Database

gpt_service = GPTService()
claude_service = ClaudeService()
together_service = TogetherService()

router = Router()


async def get_user(
    db: Database, user_id: int, username: str, language_code: str = "en"
):
    user = await db.users.find_one({"user_id": user_id})
    if not user:
        await db.add_user(
            user_id=user_id, username=username, language_code=language_code
        )
        user = await db.users.find_one({"user_id": user_id})
    return user


async def send_localized_message(message, key, user, reply_markup=None, **kwargs):
    language_code = user.get("language_code", "en")
    await message.answer(
        get_text(key, language_code, **kwargs), reply_markup=reply_markup
    )


async def send_message(message, text, reply_markup=None):
    await message.answer(text, reply_markup=reply_markup)


async def update_balance_and_history(
    db, user_id, tokens_cost, model, message_text, response
):
    await db.users.update_one(
        {"user_id": user_id},
        {
            "$inc": {"balance": -tokens_cost},
            "$push": {
                "messages_history": {
                    "model": model,
                    "message": message_text,
                    "response": response,
                    "timestamp": datetime.utcnow(),
                }
            },
        },
    )


@router.message(Command("start"))
async def start_command(message: types.Message, db: Database):
    user = await get_user(
        db,
        message.from_user.id,
        message.from_user.username,
        message.from_user.language_code or "en",
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    if len(message.text.split()) > 1:
        try:
            inviter_id = int(message.text.split()[1])

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ —Ç–æ—Ç –∂–µ —Å–∞–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            if inviter_id == user["user_id"]:
                await message.answer(
                    "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É!"
                )
                return

            inviter = await db.users.find_one({"user_id": inviter_id})
            invited_users = inviter.get("invited_users", []) if inviter else []

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –±—ã–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω
            if message.from_user.id in invited_users:
                await message.answer("‚ùå –í—ã —É–∂–µ –±—ã–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω—ã —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
                return

            if inviter:
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö
                invited_users.append(message.from_user.id)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–≤–æ–µ –ª–∏ —ç—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                is_first_invite = len(invited_users) == 1
                is_third_invite = len(invited_users) >= 3

                update_data = {
                    "invited_users": invited_users,
                }

                # –ù–∞—á–∏—Å–ª—è–µ–º —Ç–æ–∫–µ–Ω—ã —Ç–æ–ª—å–∫–æ –∑–∞ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
                if is_first_invite:
                    update_data["balance"] = inviter["balance"] + FREE_TOKENS

                # –î–∞–µ–º –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
                if is_third_invite:
                    update_data["access_granted"] = True

                await db.users.update_one(
                    {"user_id": inviter_id}, {"$set": update_data}
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–Ω–≤–∞–π—Ç–µ—Ä—É
                notification = f"üéâ –£ –≤–∞—Å –Ω–æ–≤—ã–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! ({len(invited_users)}/3)"
                if is_first_invite:
                    notification += (
                        f"\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {FREE_TOKENS} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ –ø–µ—Ä–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!"
                    )
                if is_third_invite:
                    notification += (
                        "\n‚úÖ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!"
                    )

                await message.bot.send_message(inviter_id, notification)

        except (ValueError, TypeError) as e:
            print(f"Error processing referral: {str(e)}")

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "tariff" not in user:
        await db.users.update_one(
            {"user_id": message.from_user.id},
            {
                "$set": {
                    "tariff": "free",
                    "balance": 0,
                    "last_daily_reward": None,
                    "invited_users": [],
                    "access_granted": False,
                }
            },
        )
        user["balance"] = 0
        user["tariff"] = "free"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not user.get("access_granted"):
        await send_localized_message(
            message=message,
            key="access_denied",
            user=user,
            reply_markup=None,
        )
        return

    await send_localized_message(
        message=message,
        key="start",
        user=user,
        reply_markup=None,
        username=user["username"],
        balance=user["balance"],
        current_model=user.get("current_model", "gpt"),
    )


@router.message(Command("invite"))
async def invite_command(message: types.Message, db: Database):
    user = await get_user(
        db,
        message.from_user.id,
        message.from_user.username,
        message.from_user.language_code or "en",
    )

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    invited_count = len(user.get("invited_users", []))

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    invite_link = f"https://t.me/DockMixAIbot?start={user['user_id']}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ –∏ —Å—Å—ã–ª–∫–æ–π
    await message.answer(
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {invite_link}\n\n"
        f"üë• –í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏: {invited_count}/3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        f"‚ÑπÔ∏è –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –µ—â–µ {3 - invited_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞"
    )


@router.message(Command("help"))
async def help_command(message: types.Message, db: Database):
    user = await get_user(
        db,
        message.from_user.id,
        message.from_user.language_code or "en",
    )
    await send_localized_message(
        message=message,
        key="help",
        user=user,
        reply_markup=None,
        username=user["username"],
        balance=user["balance"],
        current_model=user["current_model"],
    )


@router.message(Command("profile"))
async def profile_command(message: types.Message, db: Database):
    user = await get_user(
        db,
        message.from_user.id,
        message.from_user.language_code or "en",
    )
    await send_localized_message(
        message,
        "profile",
        user,
        user_id=user["user_id"],
        balance=user["balance"],
        current_model=user["current_model"],
        reply_markup=None,
    )


@router.message(Command("models"))
async def models_command(message: types.Message, db: Database):
    user = await get_user(
        db,
        message.from_user.id,
        message.from_user.username,
        message.from_user.language_code or "en",
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not user.get("access_granted"):
        await send_localized_message(
            message=message,
            key="access_denied",
            user=user,
            reply_markup=None,
        )
        return

    await send_localized_message(
        message,
        "select_model",
        user,
        current_model=user["current_model"],
        reply_markup=get_models_keyboard(user.get("language_code", "en")),
    )


@router.callback_query(F.data.startswith("model_"))
async def change_model_handler(callback: types.CallbackQuery, db: Database):
    user = await get_user(
        db,
        callback.from_user.id,
        callback.from_user.username,
        callback.from_user.language_code or "en",
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
    if not user.get("access_granted"):
        await send_localized_message(
            callback.message,
            key="access_denied",
            user=user,
            reply_markup=None,
        )
        return

    model = callback.data.split("_")[1]
    await db.users.update_one(
        {"user_id": callback.from_user.id}, {"$set": {"current_model": model}}
    )
    models = {GPT_MODEL: "GPT-4", CLAUDE_MODEL: "Claude 3", TOGETHER_MODEL: "Together"}
    await send_localized_message(
        callback.message,
        "model_changed",
        user,
        model=models[model],
    )


@router.message(Command("image"))
async def image_command(message: types.Message, db: Database):
    user = await get_user(
        db,
        message.from_user.id,
        message.from_user.username,
        message.from_user.language_code or "en",
    )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if not user.get("access_granted"):
        await send_localized_message(
            message=message,
            key="access_denied",
            user=user,
            reply_markup=None,
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º—Ç–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    prompt = message.text.split("/image", 1)[1].strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º—Ç–∞
    if not prompt:
        await send_localized_message(
            message,
            "image_prompt_required",
            user,
            reply_markup=None,
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user["balance"] < 5:
        await send_message(
            message, "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
        )
        return

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    try:
        await message.bot.send_chat_action(
            chat_id=message.chat.id, action=ChatAction.UPLOAD_PHOTO
        )
        image_url = await gpt_service.generate_image(prompt)
        await message.answer_photo(image_url)

        # –°–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        tokens_cost = 5
        model = "dalle-3"
        await update_balance_and_history(
            db, message.from_user.id, tokens_cost, model, prompt, image_url
        )

    except Exception as e:
        print(f"Error for user {message.from_user.id}: {str(e)}")
        await send_message(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")


@router.message()
async def handle_message(message: types.Message, db: Database):
    user = await get_user(
        db,
        message.from_user.id,
        message.from_user.username,
        message.from_user.language_code or "en",
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
    if not user.get("access_granted"):
        await send_localized_message(
            message=message,
            key="access_denied",
            user=user,
            reply_markup=None,
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞—á–∏—Å–ª—è–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã –¥–ª—è –ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if user.get("tariff") == "paid":
        last_reward = user.get("last_daily_reward")
        if not last_reward or (datetime.now() - last_reward) > timedelta(days=1):
            await db.users.update_one(
                {"user_id": message.from_user.id},
                {
                    "$inc": {"balance": DAILY_TOKENS},
                    "$set": {"last_daily_reward": datetime.now()},
                },
            )
            await message.answer(f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {DAILY_TOKENS} —Ç–æ–∫–µ–Ω–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è!")

    await message.bot.send_chat_action(
        chat_id=message.chat.id, action=ChatAction.TYPING
    )

    try:
        if user["current_model"] == GPT_MODEL:
            response = await gpt_service.get_response(message.text)
        elif user["current_model"] == CLAUDE_MODEL:
            response = await claude_service.get_response(message.text)
        elif user["current_model"] == TOGETHER_MODEL:
            response = await together_service.get_response(message.text)
        else:
            await send_message(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
            return

        # –°–ø–∏—Å—ã–≤–∞–µ–º 1 —Ç–æ–∫–µ–Ω (–∫—Ä–æ–º–µ –º–æ–¥–µ–ª–∏ TOGETHER_MODEL)
        tokens_cost = 0 if user["current_model"] == TOGETHER_MODEL else 1
        model = user["current_model"]

        await update_balance_and_history(
            db, message.from_user.id, tokens_cost, model, message.text, response
        )

        await send_message(message, response)

    except Exception as e:
        await send_message(message, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
