from datetime import datetime, timedelta
from functools import wraps
from typing import Dict, Optional, Union

from aiogram import F, Router, types
from aiogram.enums import ChatAction
from aiogram.filters import Command
from aiogram.types import FSInputFile

from bot.handlers.notifier import send_access_update_notification
from bot.keyboards.keyboards import get_models_keyboard
from bot.locales.utils import get_text
from bot.services.claude import ClaudeService
from bot.services.gpt import GPTService
from bot.services.grok import GrokService
from bot.services.together import TogetherService
from config import (
    CLAUDE_MODEL,
    DAILY_TOKENS,
    DALLE_MODEL,
    GPT_MODEL,
    GROK_MODEL,
    IMAGE_COST,
    MODEL_NAMES,
    REFERRAL_TOKENS,
    REQUIRED_CHANNEL,
    TOGETHER_MODEL,
    YOUR_ADMIN_ID,
)
from database import Database

MODEL_SERVICES = {
    GPT_MODEL: GPTService(),
    CLAUDE_MODEL: ClaudeService(),
    TOGETHER_MODEL: TogetherService(),
    GROK_MODEL: GrokService(),
}


router = Router()


def require_access(func):
    @wraps(func)
    async def wrapper(message: types.Message, db: Database, *args, **kwargs):
        user_manager = await db.get_user_manager()
        user = await user_manager.get_user(
            message.from_user.id,
            message.from_user.username,
            message.from_user.language_code or "en",
        )

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
        if user.get("access_granted") == True:
            return await func(message, db, user=user, *args, **kwargs)

        # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        try:
            member = await message.bot.get_chat_member(
                REQUIRED_CHANNEL, message.from_user.id
            )
            access_granted = member.status not in ["left", "kicked", "banned"]
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª: {str(e)}")
            access_granted = False

        if not access_granted:
            await send_localized_message(
                message, "access_denied_subscription", user, channel=REQUIRED_CHANNEL
            )
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É
            keyboard = types.InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        types.InlineKeyboardButton(
                            text=get_text(
                                "join_channel_button", user.get("language_code", "en")
                            ),
                            url=f"https://t.me/{REQUIRED_CHANNEL.replace('@', '')}",
                        )
                    ],
                    [
                        types.InlineKeyboardButton(
                            text=get_text(
                                "check_subscription_button",
                                user.get("language_code", "en"),
                            ),
                            callback_data="check_subscription",
                        )
                    ],
                ]
            )
            await message.answer(
                get_text("join_channel_prompt", user.get("language_code", "en")),
                reply_markup=keyboard,
            )
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø
        if not user.get("access_granted"):
            await db.users.update_one(
                {"user_id": user["user_id"]},
                {
                    "$set": {
                        "access_granted": True,
                        "tariff": "paid",
                        "last_daily_reward": datetime.now(),
                    }
                },
            )
            user["access_granted"] = True
            user["tariff"] = "paid"

        return await func(message, db, user=user, *args, **kwargs)

    return wrapper


async def check_subscription(message: types.Message, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —Ç—Ä–µ–±—É–µ–º—ã–π –∫–∞–Ω–∞–ª"""
    try:
        member = await message.bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        return member.status not in ["left", "kicked", "banned"]
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {str(e)}")
        return False


@router.message(Command("send_update_notification"))
async def admin_send_notification(message: types.Message, db: Database):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∞)
    if message.from_user.id != YOUR_ADMIN_ID:  # –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_ADMIN_ID –Ω–∞ ID –∞–¥–º–∏–Ω–∞
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
    success, failed = await send_access_update_notification(db, message.bot)
    await message.answer(
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {success}, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}"
    )


async def send_localized_message(
    message: types.Message,
    key: str,
    user: dict,
    reply_markup: Optional[types.InlineKeyboardMarkup] = None,
    return_text: bool = False,
    **kwargs,
) -> Union[str, None]:
    language_code = user.get("language_code", "en")
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è username –∏ invite_link
    kwargs.setdefault("username", user.get("username", ""))
    kwargs.setdefault(
        "invite_link", ""
    )  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ invite_link –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –∏–ª–∏ None
    text = get_text(key, language_code, **kwargs)
    if return_text:
        return text
    await message.answer(text, reply_markup=reply_markup)
    return None


@router.message(Command("invite"))
@require_access  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
async def invite_command(message: types.Message, db: Database, user: dict):
    invited_count = len(user.get("invited_users", []))
    invite_link = f"https://t.me/DockMixAIbot?start={user['user_id']}"

    text = "\n\n".join(
        [
            f"üîó –í–∞—à–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è: {invite_link}",
            f"üë• –í–∏ –∑–∞–ø—Ä–æ—Å–∏–ª–∏: {invited_count} –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤",
        ]
    )
    await message.answer(text)


@router.message(Command("start"))
async def start_command(message: types.Message, db: Database):
    user_manager = await db.get_user_manager()
    user = await user_manager.get_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.language_code or "en",
    )

    photo = FSInputFile("image/welcome.png")
    invite_link = f"https://t.me/DockMixAIbot?start={user['user_id']}"

    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if user.get("access_granted") == True:
        access_granted = True
    else:
        # –ò–Ω–∞—á–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
        access_granted = await check_subscription(message, message.from_user.id)

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if len(message.text.split()) > 1:
        await process_referral(message, user, db)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ —É –Ω–µ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ
    if access_granted and not user.get("access_granted"):
        await db.users.update_one(
            {"user_id": user["user_id"]},
            {
                "$set": {
                    "access_granted": True,
                    "tariff": "paid",
                    "last_daily_reward": datetime.now(),
                }
            },
        )
        user["access_granted"] = True
        user["tariff"] = "paid"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    caption_key = "access_denied_subscription" if not access_granted else "start"
    caption = await send_localized_message(
        message,
        caption_key,
        user,
        channel=REQUIRED_CHANNEL if not access_granted else None,
        invite_link=invite_link,
        balance=user["balance"] if access_granted else None,
        current_model=user.get("current_model", "gpt"),
        return_text=True,
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞
    if not access_granted:
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text=get_text(
                            "join_channel_button", user.get("language_code", "en")
                        ),
                        url=f"https://t.me/{REQUIRED_CHANNEL.replace('@', '')}",
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text=get_text(
                            "check_subscription_button", user.get("language_code", "en")
                        ),
                        callback_data="check_subscription",
                    )
                ],
            ]
        )
        await message.answer_photo(photo, caption=caption, reply_markup=keyboard)
    else:
        await message.answer_photo(photo, caption=caption)


@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: types.CallbackQuery, db: Database):
    user_manager = await db.get_user_manager()
    user = await user_manager.get_user(
        callback.from_user.id,
        callback.from_user.username,
        callback.from_user.language_code or "en",
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    access_granted = await check_subscription(callback.message, callback.from_user.id)

    if access_granted:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user.get("access_granted"):
            await db.users.update_one(
                {"user_id": user["user_id"]},
                {
                    "$set": {
                        "access_granted": True,
                        "tariff": "paid",
                        "last_daily_reward": datetime.now(),
                    }
                },
            )

        await callback.message.edit_caption(
            caption=await send_localized_message(
                callback.message, "subscription_confirmed", user, return_text=True
            ),
            reply_markup=None,
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        welcome_text = await send_localized_message(
            callback.message,
            "start",
            user,
            balance=user["balance"],
            current_model=user.get("current_model", "gpt"),
            return_text=True,
        )
        await callback.message.answer(welcome_text)
    else:
        # –í—Å–µ –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω
        await callback.answer(
            get_text("still_not_subscribed", user.get("language_code", "en")),
            show_alert=True,
        )


@router.message(Command("profile"))
async def profile_command(message: types.Message, db: Database):
    user_manager = await db.get_user_manager()
    user = await user_manager.get_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.language_code or "en",
    )
    await send_localized_message(
        message,
        "profile",
        user,
        user_id=user["user_id"],
        balance=user["balance"],
        current_model=user["current_model"],
    )


@router.message(Command("help"))
async def help_command(message: types.Message, db: Database):
    user_manager = await db.get_user_manager()
    user = await user_manager.get_user(
        message.from_user.id,
        message.from_user.username,
        message.from_user.language_code or "en",
    )
    await send_localized_message(
        message,
        "help",
        user,
        balance=user["balance"],
        current_model=user.get("current_model", "gpt"),
    )


@router.message(Command("models"))
@require_access
async def models_command(message: types.Message, db: Database, user: dict):
    await send_localized_message(
        message,
        "select_model",
        user,
        current_model=user["current_model"],
        reply_markup=get_models_keyboard(user.get("language_code", "en")),
    )


@router.callback_query(F.data.startswith("model_"))
@require_access
async def change_model_handler(callback: types.CallbackQuery, db: Database, user: dict):
    model = callback.data.split("_")[1]
    await db.users.update_one(
        {"user_id": callback.from_user.id}, {"$set": {"current_model": model}}
    )
    await send_localized_message(
        callback.message,
        "model_changed",
        user,
        model=MODEL_NAMES[model],
    )


@router.message(Command("image"))
@require_access
async def image_command(message: types.Message, db: Database, user: dict):
    prompt = message.text.split("/image", 1)[1].strip()
    if not prompt:
        await send_localized_message(message, "image_prompt_required", user)
        return

    if user["balance"] < 5:
        await message.answer("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è.")
        return

    try:
        await message.bot.send_chat_action(
            chat_id=message.chat.id, action=ChatAction.UPLOAD_PHOTO
        )
        gpt_service = MODEL_SERVICES[GPT_MODEL]
        image_url = await gpt_service.generate_image(prompt)
        await message.answer_photo(image_url)

        tokens_cost = IMAGE_COST
        model = DALLE_MODEL
        await db.users.update_one(
            {"user_id": message.from_user.id},
            {
                "$inc": {"balance": -tokens_cost},
                "$push": {
                    "history": {
                        "model": model,
                        "prompt": prompt,
                        "response": image_url,
                        "timestamp": datetime.now(),
                    }
                },
            },
        )
    except ValueError as ve:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(ve)}")
    except ConnectionError as ce:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(ce)}")


async def process_referral(message: types.Message, user: dict, db: Database) -> None:
    if len(message.text.split()) <= 1:
        return

    try:
        inviter_id = int(message.text.split()[1])
        if inviter_id == user["user_id"]:
            await message.answer("‚ùå –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç–∏ —Å–∞–º–æ–≥–æ —Å–µ–±–µ!")
            return

        inviter = await db.users.find_one({"user_id": inviter_id})
        if not inviter or message.from_user.id in inviter.get("invited_users", []):
            return

        await update_inviter_status(
            db, inviter_id, inviter, message.from_user.id, message.bot
        )

    except (ValueError, TypeError) as e:
        print(f"Error processing referral: {str(e)}")


async def update_inviter_status(
    db: Database, inviter_id: int, inviter: dict, new_user_id: int, bot
) -> None:
    invited_users = inviter.get("invited_users", []) + [new_user_id]
    await db.users.update_one(
        {"user_id": inviter_id},
        {
            "$set": {"invited_users": invited_users},
            "$inc": {"balance": REFERRAL_TOKENS},
        },
    )
    await send_inviter_notification(bot, inviter_id, len(invited_users))


async def send_inviter_notification(
    db: Database, bot, inviter_id: int, invited_count: int
) -> None:
    user_manager = await db.get_user_manager()
    user = await user_manager.get_user(inviter_id)

    text = await send_localized_message(
        None,
        "new_invited_user_tokens",
        user,
        invited_count=invited_count,
        referral_tokens=REFERRAL_TOKENS,
        return_text=True,
    )
    await bot.send_message(inviter_id, text)


@router.message()
@require_access
async def handle_message(message: types.Message, db: Database, user: dict):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    tokens_cost = 0 if user["current_model"] == TOGETHER_MODEL else 1
    if user["balance"] < tokens_cost:
        next_day = datetime.now() + timedelta(days=1)
        await send_localized_message(
            message,
            "no_tokens",
            user,
            next_day=next_day.strftime("%Y-%m-%d"),
        )
        return

    try:
        await message.bot.send_chat_action(
            chat_id=message.chat.id, action=ChatAction.TYPING
        )
        service = MODEL_SERVICES.get(user["current_model"])
        if not service:
            await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–æ–¥–µ–ª—å")
            return

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        user_data = await db.users.find_one({"user_id": message.from_user.id})
        messages_history = user_data.get("messages_history", [])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 —Å–æ–æ–±—â–µ–Ω–∏–π
        context = []
        for entry in messages_history[-5:]:  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø–∏—Å–µ–π
            context.append({"role": "user", "content": entry["message"]})
            context.append({"role": "assistant", "content": entry["response"]})

        # –í—ã–∑—ã–≤–∞–µ–º get_response —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        response = await service.get_response(message.text, context=context)

        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        await db.users.update_one(
            {"user_id": message.from_user.id},
            {
                "$inc": {"balance": -tokens_cost},
                "$push": {
                    "messages_history": {
                        "model": user["current_model"],
                        "message": message.text,
                        "response": response,
                        "timestamp": datetime.now(),
                    }
                },
            },
        )
        await message.answer(response)
    except ValueError as ve:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(ve)}")
    except ConnectionError as ce:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(ce)}")
