from aiogram import F, Router, types
from aiogram.filters import Command

from bot.services.payment import PaymentService
from database import Database

router = Router()
payment_service = PaymentService()

PRICES = {
    "50": {"tokens": 50, "amount": 5},
    "100": {"tokens": 100, "amount": 10},
    "150": {"tokens": 150, "amount": 15},
    "200": {"tokens": 200, "amount": 20},
}


@router.callback_query(F.data.startswith("pay_"))
async def process_payment(callback: types.CallbackQuery, db: Database):
    amount = callback.data.split("_")[1]

    if amount not in PRICES:
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã\n\n" "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=None,
        )
        await callback.answer()
        return

    try:
        payment_data = await payment_service.create_payment(
            amount=PRICES[amount]["amount"]
        )

        await db.users.update_one(
            {"user_id": callback.from_user.id},
            {
                "$push": {
                    "payments": {
                        "payment_id": payment_data["payment_id"],
                        "amount": PRICES[amount]["amount"],
                        "tokens": PRICES[amount]["tokens"],
                        "status": "pending",
                    }
                }
            },
        )

        await callback.message.edit_text(
            f"üí≥ –û–ø–ª–∞—Ç–∞ {PRICES[amount]['amount']}$ –∑–∞ {PRICES[amount]['tokens']} —Ç–æ–∫–µ–Ω–æ–≤\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {payment_data['payment_url']}\n\n"
            "‚è≥ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–∫–µ–Ω—ã –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n\n"
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
            reply_markup=None,
        )

    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:\n"
            f"‚îî {str(e)}\n\n"
            "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n\n"
            "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
            reply_markup=None,
        )

    await callback.answer()


@router.callback_query(F.data == "payment_error")
async def handle_payment_error(callback: types.CallbackQuery):
    await callback.message.answer(
        "‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è\n"
        "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
        "1. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
        "2. –ë–∞–Ω–∫ –æ—Ç–∫–ª–æ–Ω–∏–ª –ø–ª–∞—Ç–µ–∂\n"
        "3. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã\n\n"
        "üîÑ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ä—Ç—É"
    )
    await callback.answer()
